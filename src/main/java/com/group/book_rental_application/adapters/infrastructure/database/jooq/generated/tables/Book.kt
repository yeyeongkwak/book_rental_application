/*
 * This file is generated by jOOQ.
 */
package com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.tables


import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.Public
import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.keys.BOOK_PK

import java.time.LocalDate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Book(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.book</code>
         */
        val BOOK: Book = Book()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.book.book_id</code>.
     */
    val BOOK_ID: TableField<Record, String?> = createField(DSL.name("book_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.book.book_name</code>.
     */
    val BOOK_NAME: TableField<Record, String?> = createField(DSL.name("book_name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.book.publish_date</code>.
     */
    val PUBLISH_DATE: TableField<Record, LocalDate?> = createField(DSL.name("publish_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.book.purchase_date</code>.
     */
    val PURCHASE_DATE: TableField<Record, LocalDate?> = createField(DSL.name("purchase_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.book.available_days</code>.
     */
    val AVAILABLE_DAYS: TableField<Record, Int?> = createField(DSL.name("available_days"), SQLDataType.INTEGER.defaultValue(DSL.field("14", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.book.author</code>.
     */
    val AUTHOR: TableField<Record, String?> = createField(DSL.name("author"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.book.status</code>.
     */
    val STATUS: TableField<Record, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.book.available_rank</code>.
     */
    val AVAILABLE_RANK: TableField<Record, String?> = createField(DSL.name("available_rank"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.book</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.book</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.book</code> table reference
     */
    constructor(): this(DSL.name("book"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, BOOK, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<Record> = BOOK_PK
    override fun `as`(alias: String): Book = Book(DSL.name(alias), this)
    override fun `as`(alias: Name): Book = Book(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Book = Book(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Book = Book(name, null)
}
