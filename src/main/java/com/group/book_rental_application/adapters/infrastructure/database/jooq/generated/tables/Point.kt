/*
 * This file is generated by jOOQ.
 */
package com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.tables


import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.BookRental
import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.keys.POINT_PK
import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.keys.POINT__POINT_USER_ID

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Point(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    BookRental.BOOK_RENTAL,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>book_rental.point</code>
         */
        val POINT: Point = Point()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>book_rental.point.point_id</code>.
     */
    val POINT_ID: TableField<Record, String?> = createField(DSL.name("point_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>book_rental.point.member_id</code>.
     */
    val MEMBER_ID: TableField<Record, String?> = createField(DSL.name("member_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>book_rental.point.type</code>.
     */
    val TYPE: TableField<Record, String?> = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>book_rental.point.change_date</code>.
     */
    val CHANGE_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("change_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>book_rental.point.total_amount</code>.
     */
    val TOTAL_AMOUNT: TableField<Record, Int?> = createField(DSL.name("total_amount"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>book_rental.point</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>book_rental.point</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>book_rental.point</code> table reference
     */
    constructor(): this(DSL.name("point"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, POINT, null)
    override fun getSchema(): Schema? = if (aliased()) null else BookRental.BOOK_RENTAL
    override fun getPrimaryKey(): UniqueKey<Record> = POINT_PK
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(POINT__POINT_USER_ID)

    private lateinit var _member: Member

    /**
     * Get the implicit join path to the <code>book_rental.member</code> table.
     */
    fun member(): Member {
        if (!this::_member.isInitialized)
            _member = Member(this, POINT__POINT_USER_ID)

        return _member;
    }
    override fun `as`(alias: String): Point = Point(DSL.name(alias), this)
    override fun `as`(alias: Name): Point = Point(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Point = Point(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Point = Point(name, null)
}
