/*
 * This file is generated by jOOQ.
 */
package com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.tables


import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.Public
import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.keys.RENT_HISTORY_PK
import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.keys.RENT_HISTORY__RENT_HISTORY_BOOK_FK
import com.group.book_rental_application.adapters.infrastructure.database.jooq.generated.keys.RENT_HISTORY__RENT_HISTORY_MEMBER_FK

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RentHistory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.rent_history</code>
         */
        val RENT_HISTORY: RentHistory = RentHistory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.rent_history.rent_history_id</code>.
     */
    val RENT_HISTORY_ID: TableField<Record, String?> = createField(DSL.name("rent_history_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.rent_date</code>.
     */
    val RENT_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("rent_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.rent_history.return_date</code>.
     */
    val RETURN_DATE: TableField<Record, LocalDateTime?> = createField(DSL.name("return_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.rent_history.status</code>.
     */
    val STATUS: TableField<Record, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.left_date</code>.
     */
    val LEFT_DATE: TableField<Record, Int?> = createField(DSL.name("left_date"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.book_id</code>.
     */
    val BOOK_ID: TableField<Record, String?> = createField(DSL.name("book_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.rent_history.member_id</code>.
     */
    val MEMBER_ID: TableField<Record, String?> = createField(DSL.name("member_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.rent_history</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.rent_history</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.rent_history</code> table reference
     */
    constructor(): this(DSL.name("rent_history"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, RENT_HISTORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<Record> = RENT_HISTORY_PK
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(RENT_HISTORY__RENT_HISTORY_BOOK_FK, RENT_HISTORY__RENT_HISTORY_MEMBER_FK)

    private lateinit var _book: Book
    private lateinit var _member: Member

    /**
     * Get the implicit join path to the <code>public.book</code> table.
     */
    fun book(): Book {
        if (!this::_book.isInitialized)
            _book = Book(this, RENT_HISTORY__RENT_HISTORY_BOOK_FK)

        return _book;
    }

    /**
     * Get the implicit join path to the <code>public.member</code> table.
     */
    fun member(): Member {
        if (!this::_member.isInitialized)
            _member = Member(this, RENT_HISTORY__RENT_HISTORY_MEMBER_FK)

        return _member;
    }
    override fun `as`(alias: String): RentHistory = RentHistory(DSL.name(alias), this)
    override fun `as`(alias: Name): RentHistory = RentHistory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RentHistory = RentHistory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RentHistory = RentHistory(name, null)
}
